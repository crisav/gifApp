{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMA2CeA,EAxCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE/BC,EAF+B,KAEnBC,EAFmB,KAwBvC,OAEE,0BAAMC,SAjBa,SAACC,GAEpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAI7BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAEtCN,EAAc,OAQd,2BACEO,KAAK,OACLC,MAAOT,EACPU,SA1BoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,Y,uBCRdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEiCC,UAAUH,GAF3C,+DAGFI,MAAOF,GAHL,cAGfG,EAHe,gBAIAA,EAAKC,OAJL,uBAIdC,EAJc,EAIdA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAcdM,GAdc,4CAAH,sDCWLO,EATK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC5B,OACE,yBAAKc,UAAU,0CACb,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAKA,KCyBIO,MA3Bf,YAAgC,IAAbnB,EAAY,EAAZA,SAAY,ECAH,SAACA,GAAc,IAAD,EAEdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAgBxC,OATAC,qBAAW,WACTxB,EAASC,GACNwB,MAAM,SAAAC,GAAI,OAAIH,EAAS,CACtBf,KAAMkB,EACNL,SAAS,SAEb,CAACpB,IAGIqB,EDdwBK,CAAa1B,GAAhCa,EAFiB,EAEtBN,KAAaa,EAFS,EAETA,QAEpB,OACE,oCACE,wBAAIJ,UAAU,qCAAsChB,GAEnDoB,GAAW,uBAAGJ,UAAU,oCAAb,gBAEZ,yBAAKA,UAAU,aAGXH,EAAOJ,KAAI,SAACC,GAAD,OACT,kBAAC,EAAD,eACEiB,IAAKjB,EAAIC,IACLD,UEiBHkB,EAjCM,WAAO,IAAD,EAEW1C,mBAAS,CAAC,cAFrB,mBAElB2C,EAFkB,KAEN5C,EAFM,KAUzB,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAGA,4BAGI4C,EAAWpB,KAAI,SAAAT,GAAQ,OACrB,kBAAC,EAAD,CACE2B,IAAK3B,EACLA,SAAWA,U,MCpBzB8B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.991b5af9.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n  const [ inputValue, setInputValue ] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value)\r\n  }\r\n\r\n  // hay que manejarlo para que no haga un refresh que es su comportamietno por defecto\r\n  const handleSubmit = (e) => {\r\n    // con esta sentencia evitamos el refresh y manejamos el evento a nuestra manera\r\n    e.preventDefault();\r\n\r\n    if( inputValue.trim().length > 2 ){\r\n      // si lo manjeo con proprs tengo que usarlo asi\r\n      // props.setCategories()\r\n      // de esta forma tenemos acceso a categories \r\n      setCategories(cats => [inputValue, ...cats]);\r\n      // se resetea el setInputValue para que no se peuda enviar lo mosmo\r\n      setInputValue('');\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    // form ayuda a que con el ENTER pueda hacer submit\r\n    <form onSubmit={ handleSubmit }>\r\n      <input \r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n\r\n","export const getGifs = async( category ) => {\r\n\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=OaPbyKsC3LL6wLLIEkq6XXrAl2zSDzXK`;\r\n  const resp = await fetch( url );\r\n  const {data} = await resp.json();\r\n\r\n  const gifs = data.map( img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    }\r\n  })\r\n\r\n  return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nconst GifGridItem = ({ title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p>{ title }</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem';\r\n\r\nfunction GifGrid({ category }) {\r\n\r\n  const {data:images, loading} = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h2 className=\"animate__animated animate__fadeIn\">{ category }</h2>\r\n\r\n      {loading && <p className=\"animate__animated animate__flash\"> loading... </p>}\r\n\r\n      <div className=\"card-grid\">\r\n        \r\n        { \r\n          images.map((img) =>  (\r\n            <GifGridItem \r\n              key={img.id}\r\n              {...img}\r\n            />\r\n          ))\r\n        }\r\n        \r\n      </div>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n  \r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  useEffect( () => {\r\n    getGifs( category )\r\n      .then( imgs => setState({\r\n        data: imgs,\r\n        loading: false\r\n      }));\r\n  },[category])\r\n\r\n\r\n  return state;\r\n\r\n}\r\n","import React, {useState} from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState(['One Punch']);\r\n\r\n  // const handleAdd = () => {\r\n  //   // setCategories([...categories, 'Kare Kano', 'Evangelion', 'FLCL'])\r\n  //   setCategories( cats => [...cats, 'Kare Kano', 'Evangelion', 'FLCL'] )\r\n  // }\r\n\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories}/>\r\n      <hr />\r\n\r\n\r\n      <ol>\r\n        { \r\n          // por defecto el map recive el elemento y el indice\r\n          categories.map(category =>  (\r\n            <GifGrid \r\n              key={category}\r\n              category={ category } \r\n            />\r\n          ))\r\n        }\r\n      </ol>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}